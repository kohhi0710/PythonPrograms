# -----------------------------------------------------------------------------------------------------
# ジェネレーター式
# -----------------------------------------------------------------------------------------------------

# ジェネレーター式:「式 for ターゲットリスト in 反復可能オブジェクト」からなる構文

# ジェネレーター式によるジェネレーターオブジェクトの作成
# range(5)が返す値をxが受け取り、それを2倍にしたものを返す
generator = (x * 2 for x in range(5))

for num in generator:
    print(num)

# 比較用:ジェネレーター式をジェネレーター関数で表したもの
def dblgen():
    for x in range(5):
        yield x * 2

# -----------------------------------------------------------------------------------------------------
# リスト、集合、辞書の内包表記
# -----------------------------------------------------------------------------------------------------

# 内包表記:既に存在している何らかのデータ(シーケンスや反復可能オブジェクト)をもとにして、
# 新たなデータを作成するための簡便な記述法
# ジェネレータ式と違う点は、「式 for ターゲットリスト in 反復可能オブジェクトをカッコで囲む」という点

# 内包表記によるリストの作成
# リストの内包表記は、「[]」で囲む
l1 = list(range(10))
print(l1) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
l2 = [x * 2 for x in l1] # リストの内包表記
print(l2) # [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
l3 = [x * 2 for x in range(10)] #このように書いてもOK

# 内包表記による集合の作成
# 集合の内包表記は、「{}」で囲む
s1 = set(range(0,10,2))
print(s1) # {0, 8, 2, 4, 6}
s2 = {x * 2 for x in s1} # リストの内包表記
print(s2) # {0, 16, 4, 12, 8}
s3 = {x * 2 for x in range(0,10,2)}
print(s3)
s4 = {x * 2 for x in l1} # リストをもとに集合を作成
print(s4)

# 内包表記による辞書の作成
# 集合の内包表記は、「{}」で囲み、さらにキー/値を表現するため「式」の部分に
# コロン(:)で区切った式を2つ記述することになる
d = {n:chr(n + 65) for n in range(5)} # 辞書の内包表記
print(d) # {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E'}

# タプルには内包表記はない
# ジェネレーター式で「()」を使っているので「(x for x in ...)」と書いてもタプルにならず。ジェネレーター式になる
# タプルが欲しい場合は、組み込み関数tupleに内包表記形式の式を書く
t = tuple(x * x for x in range(5)) # 内包表記を関数tupleの引数として記述
print(t) # (0, 1, 4, 9, 16)

# その他の組み込み関数を使ったジェネレーター式

# リストの場合
t = list(x * x for x in range(5))
print(t) # [0, 1, 4, 9, 16]

# 集合の場合
t = set(x * x for x in range(5))
print(t) # {0, 1, 4, 9, 16}

# 辞書の場合
t = dict({x : x * x for x in range(5)})
print(t) # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}

# 辞書では{}を省略できないので以下はエラー
# dict(x : x * x for x in range(5)
# --------------------------------------------
#   File "<stdin>", line 1
#    dict(x : x * x for x in range(5))
#          ^
#   SyntaxError: invalid syntax
# --------------------------------------------
