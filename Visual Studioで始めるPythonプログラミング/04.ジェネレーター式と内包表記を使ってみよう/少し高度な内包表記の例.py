# -----------------------------------------------------------------------------------------------------
# for節のネスト
# -----------------------------------------------------------------------------------------------------

# for文の2重ループ
# (0,0) ～ (2,3)のタプルをリストに追加
l = []
for x in range(3):
    for y in range(4):
        l.append((x,y))

print(l) # [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), …… 省略 ……, (2, 2), (2, 3)]

# 上記for文と同じ処理を内包表記で表したもの
l = [(x,y) for x in range(3) for y in range(4)]
print(l) # [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), …… 省略 ……, (2, 2), (2, 3)]

# リストを要素とするリストのフラット化
l = [num for item in [[1],[2,3],[4,5,6]] for num in item]
print(l) # [1, 2, 3, 4, 5, 6]

# 上記の内包表記をfor文にすると…
l2 = []
# 最初のforで[1],[2,3],[4,5,6]の3要素をひとつずつ取り出し、
# 次のループでさらにそれぞれのリストの要素をひとつずつ取り出している
# ex)[2,3] → [2],[3]
for item in [[1],[2,3],[4,5,6]]:
    for num in item:
        l2.append(num)
print(l2)

# 一見すると難解な表現でも、最初のうちは自分が理解できている構文要素へ展開してみると理解がしやすくなる

# -----------------------------------------------------------------------------------------------------
# if節による要素のフィルタリング
# -----------------------------------------------------------------------------------------------------

# for節に続けて「if節」を記述すると、元の反復可能オブジェクトから要素をフィルタリングできる

l = ["みかん果汁","りんご果汁","ぶどうジュース","バナナジュース"]
# "果汁"が含まれる要素からなるリストを作成
l2 = [item for item in l if "果汁" in item] 
print(l2) # ['みかん果汁', 'りんご果汁']

# 偶数のみ取り出し、その二乗からなる集合を作成
s = {x * x for x in range(10) if x % 2 == 0}
print(s) # {0, 16, 64, 4, 36}
# 奇数のみ取り出し、その二乗からなる集合を作成
s = {x * x for x in range(10) if x % 2}
print(s) # {81, 1, 49, 9, 25}

# for節がネストしている場合、ifはそれぞれに付加できる。
# 以下は、range(5)の範囲でxには奇数のみ、yには偶数のみを取り出してそれらを組み合わせた
# タプルを要素とするリストを作成している
s = [(x,y) for x in range(5) if x % 2 for y in range(5) if not y % 2]
print(s) # [(1, 0), (1, 2), (1, 4), (3, 0), (3, 2), (3, 4)]

# -----------------------------------------------------------------------------------------------------
# 条件式
# -----------------------------------------------------------------------------------------------------

# 式1 if 条件 else 式2
# この式ではまず「条件」が評価される。
# その値がTrueであれば「式1」の値が、Falseであれば「式2」の値がその式の評価結果になｒ
# else以降は省略することができない

# 乱数が偶数か奇数かでその値が変化する条件式
# random.randintで生成した乱数が奇数のとき(True)は100、偶数の時(False)は200になる
# ※%2の計算結果が0のときはFalse、それ以外はTrueと判定されるので注意
import random
x = 100 if random.randint(0,10) % 2 else 200
print(x) # 100

#この条件式を「式」部分に記述することも可能。for節に続けるif節とは異なるので注意が必要
print(l) # ['みかん果汁', 'りんご果汁', 'ぶどうジュース', 'バナナジュース']
x = [item if "ジュース" in item else "ドリンク" for item in l] # 
print(x) # ['ドリンク', 'ドリンク', 'ぶどうジュース', 'バナナジュース']

# -----------------------------------------------------------------------------------------------------
# zip関数との組み合わせ
# -----------------------------------------------------------------------------------------------------

# zip:複数の反復可能オブジェクトを受けとり、それらの要素を1組にしたタプル(のイテレータ)を返送する
print(l) # ['みかん果汁', 'りんご果汁', 'ぶどうジュース', 'バナナジュース']
x = {"くだもの {0}".format(n) : fluit for n,fluit in zip(range(1,5),l)}
print(x) # {'くだもの 1': 'みかん果汁', 'くだもの 2': 'りんご果汁', 'くだもの 3': 'ぶどうジュース', 'くだもの 4': 'バナナジュース'}