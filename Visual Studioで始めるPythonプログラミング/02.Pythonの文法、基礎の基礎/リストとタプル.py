# -----------------------------------------------------------------------------------------------------
# listクラスの基礎
# -----------------------------------------------------------------------------------------------------

# リストの作成
lst = [5,7,2,9,3]
print(lst) # [5,7,2,9,3]

# リストはlistクラスのインスタンス
print(type(lst)) # <class 'list'>

# インデックス指定
print(lst[4]) # 3

# リストのスライス
print(lst[0:4]) # [5,7,2,9]

# リストのスライス(インデックス0～3の要素を1つ飛ばしで)
print(lst[0:4:2]) # [5,2]

# インデックスに負数を指定すると末尾からアクセス可能
print(lst[-1]) # 3

# スライスされた範囲の置き換え その1
lst2 = lst
lst2[0:2] = [4,6]
print(lst2) # [4,6,2,9,3]

# スライスされた範囲の置き換え その2
# この例では左辺と右辺の要素数が違っていてもOK
lst2 = lst
lst2[0:2] = [5,7,1]
print(lst2) # [5,7,1,2,9,3]

# sorted:リストをソートしたもののコピーを返す
print(sorted(lst2)) # [1,2,3,5,7,9]

# sortedした元のリストは変化していない
print(lst2) # [5,7,1,2,9,3]

# listクラスのsortメソッドはリストを並べ替える(破壊的変更)
lst2.sort
print(lst2)

# -----------------------------------------------------------------------------------------------------
# listクラスのメソッド
# -----------------------------------------------------------------------------------------------------

# append:要素を末尾に追加。単一の要素しか追加できない。
# append([4,5,6])のような場合、単一要素として判定され、出力は[1,2,3,[4,5,6]]となる
lst = [1,2,3]
lst.append(4)
print(lst) # [1,2,3,4]

# extend:要素を引数の要素分拡張して末尾に追加
lst.extend([5,6])
print(lst) # [1,2,3,4,5,6]

# extendにはタプルなどの反復可能なオブジェクトを渡せる
lst.extend((7,8))
print(lst) # [1,2,3,4,5,6,7,8]

# 単一要素からなるリストの加算代入
lst += [9]
print(lst) # [1,2,3,4,5,6,7,8,9]

# 整数の加算はエラーになる
# lst += 10 
# ---------------------------------------- 
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
# TypeError: 'int' object is not iterable
# ---------------------------------------- 

# remove:要素の削除
# リスト中の最初の「6」を削除
lst.remove(6)
print(lst) # [1,2,3,4,5,7,8,9]

# insert:要素の挿入
# インデックス5の位置に要素「6」を挿入
lst.insert(5,6)
print(lst) # [1,2,3,4,5,6,7,8,9]

# index:インデックスの取得
# 要素「5」のインデックスを取得
# 要素にない値の引数はエラー
print(lst.index(5))

# count:「1」の出現回数を取得
lst.append(1)
print(lst) # [1,2,3,4,5,6,7,8,9,1]
print(lst.count(1)) # 2

# pop:末尾の要素をポップ(削除)
lst.pop()
print(lst) # [1,2,3,4,5,6,7,8,9]

# reverse:逆順に並べ替える
lst.reverse()
print(lst) # [9,8,7,6,5,4,3,2,1]

# -----------------------------------------------------------------------------------------------------
# タプル
# -----------------------------------------------------------------------------------------------------

# タプルの生成
tpl = (5,7,2,9,3)
print(tpl) # (5,7,2,9,3)
# かっこがなくてもよい
tpl = 5,7,2,9,3
print(tpl) # (5,7,2,9,3)

# タプルはtupleクラスのインスタンス
print(type(tpl)) # <class 'tuple'>

# インデックスによるアクセス
print(tpl[4]) # 3

# タプルのスライス
print(tpl[0:4]) # (5,7,2,9)

# タプルのスライス(インデックス0～3の要素を1つ飛ばしで
print(tpl[0:4:2]) # (5,2)

# インデックスに負数を指定すると後ろからアクセス
print(tpl[-1]) # 3

# タプルは変更不可能なため、新しい値を入れようとするとエラー
# tpl[0:2] = (4,6) # 要素1と要素2にそれぞれ4,6を代入
# ---------------------------------------- 
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
# TypeError: 'tuple' object does not support item assignment
# ---------------------------------------- 

# sorted:タプルの要素の並び替え
sorted(tpl)
print(tpl) # (2,3,5,7,9)

# 要素を一つだけかっこで囲んだ場合はタプルにならない
print(type((1))) # <class 'int'>

# その場合は末尾にカンマを付加する
print(type((1,))) # <class 'tuple'>

# -----------------------------------------------------------------------------------------------------
# リストを要素とするタプル
# -----------------------------------------------------------------------------------------------------

lst_A = [1,2,3]
lst_B = [4,5,6]
tpl2 = (lst_A,lst_B)

# タプルの要素であるリストの要素を変更
tpl2[0][1] = 4 # tpl2[0][1] → [0]…タプル型の中のlst_A(list型)を指定、[1]…指定されたlst_Aの要素1番目
print(tpl2) # ([1,4,3],[4,5,6])

# タプル自体は変更不可能なので、その要素に代入はできない
# tpl[0] = [7,8,9]
# ---------------------------------------- 
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
# TypeError: 'tuple' object does not support item assignment
# ---------------------------------------- 