# -----------------------------------------------------------------------------------------------------
# 辞書
# -----------------------------------------------------------------------------------------------------

# 文字列をキーとした辞書の作成
d = {'くだもの1':'りんご',
     'くだもの2':'ぶどう',
     'くだもの3':'バナナ'}
print(d['くだもの1']) # りんご

# items:キー/値の列挙
print(d.items()) # dict_items([('くだもの1', 'りんご'), ('くだもの2', 'ぶどう'), ('くだもの3', 'バナナ')])

# keys:キーの列挙
print(d.keys()) # dict_keys(['くだもの1', 'くだもの2', 'くだもの3'])

# values:値の列挙 # dict_values(['りんご', 'ぶどう', 'バナナ'])
print(d.values())

# 要素の追加
d['くだもの4'] = 'キウイ'
print(d) # {'くだもの1': 'りんご', 'くだもの2': 'ぶどう', 'くだもの3': 'バナナ', 'くだもの4': 'キウイ'}

# update:要素の書き換え
d.update({'くだもの3':'バナナ(熟成)'})
d.update(くだもの4 = 'キウイ(ｱｹﾞﾘｼｬｽ)')
print(d) # {'くだもの1': 'りんご', 'くだもの2': 'ぶどう', 'くだもの3': 'バナナ(熟成)', 'くだもの4': 'キウイ(ｱｹﾞﾘｼｬｽ)'}

# 整数値をキーとした辞書の作成
d2 = {0:"りんご",1:"ぶどう",3:"バナナ"}
print(d2) # {0: 'りんご', 1: 'ぶどう', 3: 'バナナ'}
print(d2[0]) # りんご

# タプルをキーとした辞書の作成
d3 = {(0,0):"りんご",(0,1):"ぶどう",(1,0):"バナナ"}
print(d3[(1,0)]) # バナナ

# dict関数を使って辞書を作る
d4 = dict([("くだもの1","りんご"),
           ("くだもの2","ぶどう"),
           ("くだもの3","バナナ")])
print(d4) # {'くだもの1': 'りんご', 'くだもの2': 'ぶどう', 'くだもの3': 'バナナ'}

d5 = dict(くだもの1 = "りんご",くだもの2 = "ぶどう",くだもの3 = "バナナ")
print(d5) # {'くだもの1': 'りんご', 'くだもの2': 'ぶどう', 'くだもの3': 'バナナ'}

# -----------------------------------------------------------------------------------------------------
# 集合
# -----------------------------------------------------------------------------------------------------

s1 = {"りんご","ぶどう","バナナ"}
s2 = s1.copy()
s2.add("キウイ")
print(s1) # {'ぶどう', 'バナナ', 'りんご'}
print(s2) # {'ぶどう', 'キウイ', 'バナナ', 'りんご'}

# difference:差集合
print(s2 - s1) # {'キウイ'}
print(s2.difference(s1)) # {'キウイ'}

# intersection:共通集合
print(s2.intersection(s1)) # {'りんご', 'バナナ', 'ぶどう'}

# s1がs2を包含しているか
print(s1 >= s2) # False

# s2がs1を包含しているか
print(s2 >= s1) # True

# 対称差(どちらかにのみ含まれている要素からなる集合)
print(s1 ^ s2) # {'キウイ'}

# s1に要素を追加
s1.add("柿") 
print(s1^s2) # {'柿', 'キウイ'}

# もはやs1はs2の部分集合ではない
print(s2 > s1) # False

# isdisjoint:引数の値が存在しないとき、Trueを返す
# s3とs1は互いに共通する要素を持たない
s3 = {"レモン"}
print(s3.isdisjoint(s1)) # True

# frozenset:変更不可能なオブジェクトを作る
# s1をもとにfrozensetを作成
fs = frozenset(s1) # frozenset({'柿', 'りんご', 'ぶどう', 'バナナ'})
print(fs)

# frozensetは変更不可能
# fs.add("レモン")
# -----------------------------------------------------------
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
# AttributeError: 'frozenset' object has no attribute 'add'
# -----------------------------------------------------------

# set:リストから集合を作成する
lst = [9,8,7,6,5,4,3,2,1]
s4 = set(lst)
print(s4) # {1, 2, 3, 4, 5, 6, 7, 8, 9}

# set関数を利用して辞書から集合を作成
# 値は落とされ、キーだけが残る
s5 = set(d)
print(s5) # {'くだもの1', 'くだもの3', 'くだもの4', 'くだもの2'}

# set関数に辞書ビュー(反復可能オブジェクト)を渡して、集合を作成
s6 = set(d.items())
print(s6) # {('くだもの2', 'ぶどう'), ('くだもの1', 'りんご'), ('くだもの4', 'キウイ(ｱｹﾞﾘｼｬｽ)'), ('くだもの3', 'バナナ(熟成)')}