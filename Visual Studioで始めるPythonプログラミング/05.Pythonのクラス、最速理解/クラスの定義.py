# -----------------------------------------------------------------------------------------------------
# シンプルなクラス
# -----------------------------------------------------------------------------------------------------

# pythonでは「class ～:」の後にブロックがないとエラーになるので
# 何しないことを示すためにpsss文を記述する
class Foo:
    pass #何もしない

# クラスのインスタンスを作成する
# newは不要で、以下のようにクラス名に続けてかっこを記述して関数的に使用する
f = Foo()
print(type(f)) # <class 'クラスの定義.Foo'>

# -----------------------------------------------------------------------------------------------------
# メンバを持つクラスの定義
# -----------------------------------------------------------------------------------------------------

# class クラス名:
    # クラス変数名 = ... #クラス変数

    # インスタンスの初期化
    # def __init__(self[, パラメーターリスト]):  # インスタンスの初期化を行う
    # self.インスタンス変数名 = ...  # インスタンス変数の初期化を行う

    # インスタンスメソッド
    # def instance_method(self[, パラメーターリスト]):
    # インスタンスメソッドの実装

    # @classmethod   # クラスメソッドは「@classmethod」で修飾する
    # def class_method(cls[, パラメーターリスト]):
    # クラスメソッドの実装

    # @staticmethod  # スタティックメソッドは「@staticmethod」で修飾する
    # def static_method([パラメーターリスト]):
    # スタティックメソッドの実装

class Foo:
    def __init__(self, name):
        # インスタンス変数
        # インスタンス変数にアクセスするには、「self.」を必ず前置する
        self.name = name

    # インスタンスメソッド
    def hello(self):
        print("hello",self.name)

    # インスタンスメソッドから別のインスタンスメソッドを呼び出す時も
    # インスタンス変数へのアクセスと同じように必ず「.self」を前置する
    # 無いとエラーが発生する
    def bar(self):
        print("instance method #2")
        self.hello()

# 同じ名前のクラスやメソッドをいくつでも定義できる
# 基本的に、一番最後に書かれたものが適用対象となる。
# 以下のFooクラス(3つめのFooクラス)を定義した場合、
# 2つめのクラスのhelloメソッドを持っていないため、下のf.fello()はエラーになる

# class Foo:
#     pass

f = Foo("たけし")
f.hello() # hello たけし
f.bar() # hello たけし

