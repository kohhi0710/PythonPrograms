# ----------------------------------------------------------------------------------------
# 多重継承
# ----------------------------------------------------------------------------------------

# ダイヤモンド継承を示すクラス群
#    B
#  ／ ＼
# D1   D2
#  ＼ ／
#    D3

class B:
    def m(self):
        print("m on B")

class D1(B):
    def m(self):
        print("m on D1")

class D2(B):
    def m(self):
        print("m on D2")

class D3(D1,D2):
    # superを使うと多重継承時のメソッド探索をカスタマイズできる。
    # 「メソッドの呼び出しをtypeの親または兄弟クラスに移譲するオブジェクト」を返す
    # →D3の親か兄弟クラスのインスタンスメソッドmを呼び出す
    # →第2引数は、インスタンスメソッド呼び出しで使われるコンテキスト(オブジェクト)で、
    #   D3クラスのインスタンスに対して親クラスまたは兄弟クラスのインスタンスメソッドmを呼び出すということになる
    def m(self):
        super(D3,self).m()

d3 = D3()
# D1クラスのメソッドが呼び出される
# D3クラスのパラメータを(D2,D1)に変更すると、D2クラスのメソッドが呼び出される(m on D2)
d3.m() # m on D1

# クラスオブジェクトの__mro__属性を使えば、メソッド解決順序を取得できる
# D3→D1→D2→Bの順に検索が行われる
print(D3.mro()) # [<class '多重継承.D3'>, <class '多重継承.D1'>, <class '多重継承.D2'>, <class '多重継承.B'>, <class 'object'>]

# D1の「親または兄弟」となるクラスにインスタンスメソッドmの呼び出しを移譲する
class D3(D1,D2):
    def m(self):
        super(D1,self).m()

d3 = D3()
d3.m() # m on D2