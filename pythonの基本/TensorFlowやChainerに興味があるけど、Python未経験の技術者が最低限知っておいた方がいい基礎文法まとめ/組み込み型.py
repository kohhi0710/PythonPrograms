# ----------------------------------------------------------------------------------------
# 組み込み型
# ----------------------------------------------------------------------------------------

# bool型:
# TrueかFalse。ただしPythonでは「None、ゼロ(0,0.00など)、空の文字列/リスト/タプル/辞書」などは
# ブール演算の中ではFalseとして、その他はTrueとして扱われる

# 数値型:
# 整数(int)、浮動小数点(float)、複素数(complex)がある。
# intは任意のサイズの整数値を扱える(ビット幅による制約はない)

# シーケンス型:
# リスト(list)、タプル(tuple)、rangeオブジェクト。
# なお、Python3の組み込み型として配列はサポートされておらず、配列的なデータはリストなどを使用して表現する。
# ただし効率の良い配列がarrayモジュールとして、あるいは数値演算パッケージNumpyに含まれる形で提供されている。

# テキストシーケンス型:
# いわゆる文字列型(str)。Python3では文字列はUnicode文字列で構成される。

# 集合型:
# 要素が可変の集合(set)と要素が不変の集合(frozenset)がある。集合には順序性がなく、同一要素の重複も許されない。
# 何等かの値の存在確認や、リストなどの要素の重複を許すデータから重複要素の除去、集合演算などを行うのに使用できる。

# 辞書型:
# キーと値からなるデータを扱うための型(dict)

# -------------------------------------
#　変数の定義とif文
# -------------------------------------
# float型
a = 0.0 
if a:
    # ブール式中では0.0はFalseとなる
    print(true) # False

# -------------------------------------
# リストの加算
# -------------------------------------
# rangeオブジェクトからlistオブジェクトを生成
a = list(range(5))
b = list(range(5,10))
print(a + b) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# -------------------------------------
# 文字列の反復
# -------------------------------------
s = "string"
# 文字列は反復可能なオブジェクト
for c in s:
    # print関数のend引数は関数の最後に出力される(デフォルトは改行)
    print(c,end = '') # string
    # print(c,end = '★') # s★t★r★i★n★g
print() # このprintで一気に出力される

# -------------------------------------
# 集合の作成
# -------------------------------------
# sが重複している
s = 'strings'
# 集合では要素の重複は許されない
st = set(s)
print(st) # {'g', 'n', 'r', 's', 'i', 't'}

# -------------------------------------
# 整数の除算と切り捨て除算
# -------------------------------------
# 除算
print(10 / 3) # 3.3333333333333335
# 切り捨て除算
print(10 // 3) # 3

# -------------------------------------
# ビット演算
# -------------------------------------
# ビットAND(1010 & 0011)
print(10 & 3) # 2
# ビットOR(1010 | 0011)
print(10 | 3) # 11