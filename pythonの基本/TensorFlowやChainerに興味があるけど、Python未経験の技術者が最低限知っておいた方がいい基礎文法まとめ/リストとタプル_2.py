# ----------------------------------------------------------------------------------------
# リスト
# ----------------------------------------------------------------------------------------

# リスト(list)オブジェクトは任意の型のデータを要素とするデータ構造で、「[]」で囲んで表現する。
# 要素を変更可能な点がタプルと異なる。

# リストオブジェクトの作成
l = ['abc',1,(1,100)]
print(l) # ['abc', 1, (1, 100)]
print(type(l)) # <class 'list'>

from random import randint
# リスト内包表記によるリスト作成
l = [randint(0,10) for x in range(10)]
print(l) # [10, 4, 2, 6, 5, 0, 10, 9, 6, 9]

# sortメソッド
l = ['jpn', 'usa', 'gbr', 'ita', 'esp', 'tha']
# lを辞書式順序に並び替え
m = sorted(l)
print(m) # ['esp', 'gbr', 'ita', 'jpn', 'tha', 'usa']
# lは変化していない
print(l) # ['jpn', 'usa', 'gbr', 'ita', 'esp', 'tha']
# lの内容を辞書式順序に並び替え
l.sort()
# lの並びが変わる
print(l) # ['esp', 'gbr', 'ita', 'jpn', 'tha', 'usa']

# リストの乱数を文字列化したもの
l = [str(randint(0,20)) for x in range(10)]
print(l)         # ['10', '13', '7', '10', '11', '5', '5', '9', '2', '10']
# 辞書式順序に並び替え
print(sorted(l)) # ['10', '10', '10', '11', '13', '2', '5', '5', '7', '9']
# キー関数として組み込み関数intを渡すと、数値比較が行われて意図した通りに並び替えられる
print(sorted(l,key = int)) # ['2', '5', '5', '7', '9', '10', '10', '10', '11', '13']

# ----------------------------------------------------------------------------------------
# タプル
# ----------------------------------------------------------------------------------------

# 1つの要素を囲んだだけではタプルにはならない
t = (1)
print(type(t)) # <class 'int'>
# 1要素のタプルを作成するにはカンマが必要
t = (1,)
print(type(t)) # <class 'tuple'>
t = ('abc',1,(1,100))
print(t) # ('abc', 1, (1, 100))

l = [randint(0,10) for x in range(10)]
# リストからタプルを作成
t = tuple(l)
print(t) # (4, 6, 3, 7, 9, 0, 10, 10, 0, 1)
# ジェネレーター式からタプルを作成
t = tuple(randint(0,10) for x in range(10))
print(t) # (1, 2, 9, 9, 6, 0, 1, 7, 8, 4)

# ----------------------------------------------------------------------------------------
# 文字列／タプル／リストに共通な処理
# ----------------------------------------------------------------------------------------

# シーケンスではインデックスを指定して、特定の要素や指定した範囲の要素を取り出せる。
# 指定した範囲の取り出しのことをスライス/スライシングと呼ぶ。

# s[index]:
# シーケンスsから指定した位置の要素を取り出す

# s[start:end]:
# start～endの範囲にある要素をとりだす(endの値の直前の要素まで)

# s[start:end:step]:
# start～endの範囲でstepで指定した値ごとに要素を取り出す

# s[start:]:
# start位置から以降の要素を全て取り出す

# s[start::step]:
# start位置からstepで指定した値ごとに要素を取り出す

# s[:end:step]:
# 先頭～endまでの範囲からstepで指定した値ごとに要素を取り出す

# s[::step]:
# 先頭からstepで指定した値ごとに要素を取り出す

# s[:]:
# 全要素の取り出し

# ------------------------------------
# シーケンスからの要素の取り出しの例
# ------------------------------------

# 文字列
s = "0123456789"
# リスト
l = list(range(10))
print(l) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# タプル
t = tuple(l)
print(t) # (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
# 指定した位置の要素を取り出す
print(s[7]) # 7
# 2～5の範囲のスライスをとりだす
print(l[2:5]) # [2,3,4]
# 全範囲から1つおきに要素をとりだす
print(t[0:10:2]) # (0,2,4,6,8)
# 全範囲の場合はstartとendは省略可能
print(t[::2]) # (0,2,4,6,8)
# 負の値を指定すると末尾からの位置指定になる
print(s[-3:]) # 789
print(s[-3:-1]) # 78

# ----------------------------------------------------------------------------------------
# 存在確認/要素のチェック
# ----------------------------------------------------------------------------------------

# target in s target not in s:
# シーケンスsに要素が含まれているか(いないか)

# len(s):
# 要素の長さを取得

# s.index(target[,start[,end]]):
# シーケンスs内の範囲start～endから要素targetを検索

# s.count(target):
# シーケンスs内で指定した要素targetの発生回数をカウント

# max(s):
# 最大値の取得

# min(s):
# 最小値の取得

# ------------------------------
# 要素の存在確認とチェックの例
# ------------------------------

# 適当に作成した文字列
s = "".join([chr(randint(0,25) + ord('a')) for x in range(10)])
print(s) # uxnckguriz
l = ['jpn', 'usa', 'gbr', 'ita', 'esp', 'tha']
t = tuple(l)

# 文字'a'が文字列sに含まれているか
print('a' in s) # False
# 文字'q'が文字列sに含まれていないか
print('q' not in s) # True
# リストの要素数
print(len(l)) # 6
# 文字列の文字数
print(len(s)) # 10
# タプルの最大値
print(max(t)) # usa
# リストの最小値
print(min(l)) # esp
# 文字列sに'd'が何個あるか
print(s.count('d')) # 0
# リストから'gbr'を検索
print(l.index('gbr')) # 2

# ----------------------------------------------------------------------------------------
# 要素の連結
# ----------------------------------------------------------------------------------------

# s1 + s2:
# シーケンスs1、s2の連結

# s * n、n * s:
# シーケンスsをn回繰り返し新たなシーケンスを生成

# --------------------
# シーケンス連結の例
# --------------------

# リストの連結
print([1,2,3] + [4,5,6]) # [1, 2, 3, 4, 5, 6]
# 文字列の連結
print("foo" + "bar") # foobar
# (1,2,3)を2回繰り返す
print((1,2,3) * 2) # (1, 2, 3, 1, 2, 3)

# ----------------------------------------------------------------------------------------
# リストの破壊的な操作
# ----------------------------------------------------------------------------------------

# リストは要素を変更可能であることから、文字列やタプルと異なり、要素を追加、削除、変更するための
# 操作が提供されている。

# l.append(x):
# リストlに要素xを追加

# l.clear():
# リストlの内容を削除

# l.copy():
# リストlの浅いコピーを作成

# l.extend(iterable):
# リストlの内容をiterableの内容で拡張(iterableの要素が個々にリストに追加される)

# l.insert(index,x):
# 指定したindexにxを挿入

# l.pop(index):
# 指定したindexの要素を取り出して削除

# l.remove(x):
# 指定した最初のxを削除

# l.reverse():
# リストlを逆順に並べ替える

# -----------------------
# リストの破壊的操作の例
# -----------------------

# 空リストの作成
l = []

# appendメソッドで「1」を追加
l.append(1)
# appendメソッドで「[2,3]」を追加
l.append([2,3])
print(l) # [1,[2,3]]

# extendメソッドの引数の内容が展開されて追加される
l.extend([4,5])
print(l) # [1, [2, 3], 4, 5]
print(l[1:2]) # [[2,3]]

# スライスの内容を反復可能オブジェクトの内容で置き換える
l[1:2] = (2,3)
print(l) # [1,2,3,4,5]

# +=演算子はextendメソッドと同様に機能する
l += [6,7]
print(l) # [1, 2, 3, 4, 5, 6, 7]

# 逆順に並び替え
l.reverse()
print(l) # [7, 6, 5, 4, 3, 2, 1]

# 末尾の要素を取り出して削除
l.pop()
print(l) # [7, 6, 5, 4, 3, 2]

# 指定した要素の削除
l.remove(3)
print(l) # [7, 6, 5, 4, 2]

# リスト末尾に「0」を追加
l.insert(len(l),0)
print(l) # [7, 6, 5, 4, 2, 0]