# https://qiita.com/moe_713/items/671c8c912f6e8d6c7442

import numpy as np

# -------------------------------------------------------------------------------------------------
# 1.配列をつくる
# -------------------------------------------------------------------------------------------------

# ----------------------------
# 01 np.array -- 配列をつくる
# ----------------------------

x = np.array([1,2,3])
print(x) # [1 2 3]

# ----------------------------------------
# 02 np.zeros -- 要素がゼロの配列をつくる
# ----------------------------------------

x = np.zeros(3,dtype = float)
print(x) # [0. 0. 0.]

# ----------------------------------------------------------
# 03 np.zeros_like -- aと同じ形式の、要素がゼロの行列を作る
# ----------------------------------------------------------

a = np.array([1,2,3])
x = np.zeros_like(a)
print(x) # [0 0 0]

# ----------------------------------
# 04 np.ones -- 要素が1の配列を作る
# ----------------------------------

x = np.ones(3)
print(x) # [1. 1. 1.]

# -----------------------------
# 05 np.eyes -- 単位行列を作る
# -----------------------------

x = np.eye(4)
print(x) # [[1. 0. 0. 0.]
         #  [0. 1. 0. 0.]
         #  [0. 0. 1. 0.]
         #  [0. 0. 0. 1.]]

# -----------------------------------
# 06 no.arange -- 規則的な配列を作る
# -----------------------------------

# 引数は順に(始点,終点,間隔)
# 終点について、アウトプットは終点の値を「含まない」
x = np.arange(0,2,0.5) 
print(x) # [0.  0.5 1.  1.5]

# -------------------------------------
# 07 np.linspace -- 規則的な配列を作る
# -------------------------------------

# 引数は順に(始点、終点、個数)
# 終点について、アウトプットは終点の値を「含む」
x = np.linspace(1,10,10)
print(x) # [ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]

# -------------------------------------------------------------------------------------------------
# 2.様々な乱数の配列をつくる
# -------------------------------------------------------------------------------------------------

# ------------------------------------------------------------
# 08 np.random.rand -- 0.0以上、1.0未満の一様分布の乱数を生成
# ------------------------------------------------------------

# 0～1の乱数を2つ作成
x = np.random.rand(2)
# 乱数は都度生成される
print(x) # [0.31750122 0.90048515]

# 0～1の乱数で2 * 2の行列を生成
x = np.random.rand(2,2)
print(x) # [[0.36756814 0.70795178]
         #  [0.92750981 0.6990881 ]]

# -------------------------------------------------
# 09 np.random.randint -- 範囲での任意の乱数を生成
# -------------------------------------------------

# 1～7未満の範囲で任意の整数が返される
x = np.random.randint(1,7)
print(x) # 3

# ---------------------------------------------------------------
# 10 np.random.randn -- 平均0、分散1の標準正規分布に従う値を作成
# ---------------------------------------------------------------

# 値をひとつ作成
x = np.random.randn()
print(x) # -1.973858745879996

# 値を2 * 2行列で作成
x = np.random.randn(2,2)
print(x) # [[ 0.73807139  1.29581486]
         #  [-0.81191267 -1.32224931]]

# -----------------------------------------------------------------
# 11 np.random.normal -- 正規分布の任意の平均・標準偏差を指定できる
# -----------------------------------------------------------------

# 平均5、標準偏差1の正規分布
x = np.random.normal(5,1)
print(x) # 4.598003911679337

# --------------------------------------------
# 12 np.random.choice -- ランダムに要素を抽出
# --------------------------------------------

a = np.array(10)
print(a) # 10
# 配列aの中からランダムに要素を抽出
x = np.random.choice(a)
print(x) # 7

# -------------------------------------------------------------------------------------------------
# 3.配列の参照をする
# -------------------------------------------------------------------------------------------------

# --------------------------------------
# 13 ndarray.ndim -- 行列の次元数を参照
# --------------------------------------

a = np.array([[1,2,3],[4,5,6]])
x = a.ndim
print(x) # 2

# --------------------------------------
# 14 ndarray.size -- 行列の要素数を参照
# --------------------------------------

a = np.array([[1,2,3],[4,5,6]])
x = a.size
print(x) # 6

# -----------------------------------
# 15 ndarray.shape -- 行・列数を参照
# -----------------------------------

a = np.array([[1, 2 ,3],[4, 5, 6]])
x = a.shape
print(x) # (2, 3)

# -----------------------------------
# 16 ndarray.dtype -- 要素の型を参照
# -----------------------------------

a = np.array([[1, 2 ,3],[4, 5, 6]])
x = a.dtype
print(x) # int32

# ---------------------------------------
# 17 [p,q] -- 配列のp行q列目の要素を参照
# ---------------------------------------

a = np.array([1,2,3])

# 先頭を0番目とした際の1番目の値を参照
print(a[1]) # 2

# 0番目から、2番目の1つ手前までを参照
print(a[0:2]) # [1 2]

b = np.array([[1, 2 ,3],[4, 5, 6]])

# 0行1列目を参照
print(b[0,1]) # 2

# 1列目を参照
print(b[:,1]) # [2 5]

# 1,2列目を参照
print(b[:,[1,2]]) # [[2 3]
                  #  [5 6]]

# -------------------------------------------------------------------------------------------------
# 4.配列を操作する
# -------------------------------------------------------------------------------------------------

# ----------------------------------------------
# 18 ndarray.reshape(p,q) -- p行q列の配列に変換
# ----------------------------------------------

a = np.array([[1,2,3],[4,5,6]])
x = a.reshape(3,2)
print(x) # [[1 2]
         #  [3 4]
         #  [5 6]]

# --------------------------------------------------------------------
# 19 ndarray.resize(p,q) -- p行q列の配列に変換し、
#                           変更された配列がもとの配列より大きければ、
#                           必要なだけ0で埋める
# --------------------------------------------------------------------

a = np.array([[1,2,3],[4,5,6]])
a.resize(3,3)
print(a) # [[1 2 3]
         #  [4 5 6]
         #  [0 0 0]]

# 破壊的変更を実行するインプレースな挙動のメソッドなので、
# 代入による戻り値はNoneを返す
# x = a.resize(3,3)
# print(x) # None

# --------------------------------------------------
# 20 ndarray.ravel -- 多次元配列を1次元の行列にする
# --------------------------------------------------

a = np.array([[1,2,3],[4,5,6]])
x = a.ravel()
print(x) # [1 2 3 4 5 6]

# -------------------------------------
# 21 np.flip -- 配列の要素を反対にする
# -------------------------------------

# 参考:https://analytics-note.xyz/programming/numpy-flip/

a = np.array([[1,2,3],[4,5,6]])

# axis = 0 → 縦の要素の反転 
x = np.flip(a,axis = 0)
print(x) # [[4 5 6]
         #  [1 2 3]]
          
# axis = 1 → 横の要素の反転 
x = np.flip(a,axis = 1)
print(x) # [[3 2 1]
         #  [6 5 4]]

# a[::-1,::-1]といったスライスでも同様のことができる
x = a[::-1,::-1]
print(x) # [[6 5 4]
         #  [3 2 1]]

# -------------------------------------------------
# 22 ndarray.transpose -- 配列を転置(入れ替え)する
# -------------------------------------------------

# 参考:https://deepage.net/features/numpy-transpose.html

a = np.array([[1,2,3],[4,5,6]])
x = a.transpose()
print(x) # [[1 4]
         #  [2 5]
         #  [3 6]]

# --------------------------------
# 23 np.append -- 配列に要素を追加
# --------------------------------

a = np.array([1,2,3])

# 末尾に4を追加
x = np.append(a,4)
print(x) # [1 2 3 4]

# 先頭に0を追加
x = np.append(0,a)
print(x) # [0 1 2 3]

# ---------------------------------------------
# 24 np.where -- 条件を満たす要素を返す、
#                あるいはTrue・Falseを判定する
# ---------------------------------------------

a = np.arange(6).reshape((2,3)) # array([[0, 1, 2],
                                #        [3, 4, 5]])

# a < 3の場合True、そうでない場合Falseを返す
x = np.where(a < 3,True,False)
print(x) # [[ True  True  True]
         #  [False False False]]

# a < 3を満たす要素の範囲を抽出
x = np.where(a < 3)
print(x) # (array([0, 0, 0], dtype=int64), array([0, 1, 2], dtype=int64))

# ---------------------------------------------------------
# 25 np.all -- 配列の要素が全て条件を満たすか否かを判定する
# ---------------------------------------------------------

a = np.arange(6).reshape((2,3))

x = np.all(a < 3)
print(x) # False

x = np.all(a < 6)
print(x) # True

# ----------------------------------------------------------------
# 26 np.any -- 配列の要素のいずれかが条件を満たすか否かを判定する
# ----------------------------------------------------------------

a = np.arange(6).reshape((2,3))

x = np.any(a < 3)
print(x) # True

x = np.any(a > 6)
print(x) # False

# --------------------------------------------------------------------------
# 27 ndarray.argmax -- 多次元配列の中の最大値の要素を持つインデックスを返す
# --------------------------------------------------------------------------

a = np.array([1,2,3])
x = a.argmax()
print(x) # 2

# -----------------------------------------
# 28 np.sort -- 配列を小さい順に並び替える
# -----------------------------------------

a = np.array([8,2,1,5,6])
x = np.sort(a)
print(x) # [1 2 5 6 8]

# ----------------------------------------------------------------------------------
# 29 np.argsort -- 配列を小さい順に並び替えた際の配列のインデックス(ソート順)を出力
# ----------------------------------------------------------------------------------

a = np.array([8,2,1,5,6])
x = np.argsort(a)
print(x) # [2 1 3 4 0]

# ---------------------------------------
# 30 np.expand_dims -- 配列に次元を追加
# ---------------------------------------

a = np.arange(6).reshape(2,3) # array([[0, 1, 2],
                              #        [3, 4, 5]])

x = np.expand_dims(a,0)
print(x) # [[[0 1 2]
         #   [3 4 5]]]

x = np.expand_dims(a,0).shape
print(x) # (1, 2, 3)

x = np.expand_dims(a,1)
print(x) # [[[0 1 2]]
         #
         #  [[3 4 5]]]

x = np.expand_dims(a,1).shape
print(x) # (2, 1, 3)

# -------------------------------------------------------------------------------------
# 31 np.broadcast_to -- ブロードキャストと呼ばれる、異なる形状の配列の自動統一を実施
#                       特にbroadcast_toは配列の形状にブロードキャストする際に使用する
# -------------------------------------------------------------------------------------

a = np.arange(2) # array([0, 1])
x = np.broadcast_to(a,(2,2))
print(x) # [[0 1]
         #  [0 1]]

# ------------------------------------------------------------------------------------
# 32 np.broadcast_arrays -- 複数の配列をブロードキャストして形状を揃えたい際に使用する
# ------------------------------------------------------------------------------------

a = np.arange(3) # array([0, 1, 2])
b = np.arange(3).reshape(3,1) # array([[0],
                              #        [1],
                              #        [2]])
x = np.broadcast_arrays(a,b)
print(x) # [array([[0, 1, 2],
         #         [0, 1, 2],
         #         [0, 1, 2]]), array([[0, 0, 0],
         #         [1, 1, 1],
         #         [2, 2, 2]])]

# -------------------------------------------------------------------------------------------------
# 5.配列の計算
# -------------------------------------------------------------------------------------------------

# -------------------
# 33 一般的な四則演算
# -------------------

a = np.array([1,2,3])
b = np.array([4,5,6])

x = a + b
print(x) # [5 7 9]

x = a - b
print(x) # [-3 -3 -3]

x = a * b
print(x) # [ 4 10 18]

x = a / b
print(x) # [0.25 0.4  0.5 ]

# aの2乗
x = a ** 2
print(x) # [1 4 9]

# ------------------------------
# 34 np.add(a,b) -- a,bの足し算
# ------------------------------

a = np.array([1,2,3])
b = np.array([4,5,6])

x = np.add(a,b)
print(x) # [5 7 9]

# -----------------------------------
# 35 np.subtract(a,b) -- a,bの引き算
# -----------------------------------

a = np.array([1,2,3])
b = np.array([4,5,6])

x = np.subtract(a,b)
print(x) # [-3 -3 -3]

# --------------------------------
# 36 np.sum -- 配列の要素の合計値
# --------------------------------

a = np.array([[1,2,3],[4,5,6]])
x = np.sum(a)
print(x) # 21

# 列ごとの合計値
x = np.sum(a,axis = 0)
print(x) # [5 7 9]

# 行ごとの合計値
x = np.sum(a,axis = 1)
print(x) # [ 6 15]

# -----------------------------------------
# 37 np.multiply(a,b) -- a,bの要素ごとの積
# -----------------------------------------

a = np.array([1,2,3])
b = np.array([4,5,6])

x = np.multiply(a,b)
print(x) # [ 4 10 18]

# ------------------------------------
# 38 np.dot(a,b) -- a,bの配列同士の積
# ------------------------------------

a = np.arange(3).reshape(1,3) # [[0, 1, 2]]
b = np.arange(3).reshape(3,1) # [[0],
                              #  [1],
                              #  [2]]

x = np.dot(a,b)
print(x) # [[5]]

# -------------------------
# 39 np.mean -- 平均の算出
# -------------------------

a = np.arange(10).reshape(2,5) # [[0, 1, 2, 3, 4],
                               #  [5, 6, 7, 8, 9]]
x = np.mean(a)
print(x) # 4.5

# ----------------------------
# 40 np.std -- 標準偏差の算出
# ----------------------------

a = np.arange(10).reshape(2,5)
x = np.std(a)
print(x) # 2.8722813232690143

# --------------------------
# 41 np.power -- 累乗の計算
# --------------------------

# 2の3乗
x = np.power(2,3)
print(x) # 8

a = np.array([1,2,3])
x = np.power(a,2)
print(x) # [1 4 9]

# ---------------------------
# 42 np.sqrt -- 平方根の計算
# ---------------------------

x = np.sqrt(4) 
print(x) # 2.0

a = np.array([1,4,9])
x = np.sqrt(a)
print(x) # [1. 2. 3.]

# --------------------------
# 43 np.max -- 最大値を返す
# --------------------------

a = np.array([1,2,3])
x = np.max(a)
print(x) # 3

# --------------------------
# 44 np.min -- 最小値を返す
# --------------------------

a = np.array([1,2,3])
x = np.min(a)
print(x) # 1

# ----------------------------
# 45 np.abs -- 絶対値を求める 
# ----------------------------

x = np.abs(-1)
print(x) # 1

# --------------------
# 46 np.exp -- eのx乗
# --------------------

x = np.exp(1)
print(x) # 2.718281828459045

# -----------------------------------
# 47 np.log(x) -- eを底とするxの対数
# -----------------------------------

x = np.log(1)
print(x) # 0.0

# ----------------------------
# 48 np.sin(x) -- sinを求める
# ----------------------------

x = np.sin(1)
print(x) # 0.8414709848078965

# ----------------------------
# 49 np.cos(x) -- cosを求める
# ----------------------------

x = np.cos(1)
print(x) # 0.5403023058681398

# ----------------------------
# 50 np.tan(x) -- tanを求める
# ----------------------------

x = np.tan(1)
print(x) # 1.557407724654902

# -------------------------------------------------------------------------------------------------
# EX.用語
# -------------------------------------------------------------------------------------------------

# -----
# 行列
# -----

# 数や記号や式などを縦と横に矩形状に配列したものである。
# 横に並んだ一筋を行、縦に並んだ一筋を列と呼ぶ。
# 例えば、下記のような行列

#  1 9 13
# 20 5 -6

# は2つの行と3つの列によって構成されているため、(2,3)型または2×3型の行列と呼ばれる。

# https://ja.wikipedia.org/wiki/%E8%A1%8C%E5%88%97

# ---------
# 単位行列
# ---------

# 行列の対角成分が全て1になっている正方行列のことをさす

# A = 1 0 0 0
#     0 1 0 0
#     0 0 1 0
#     0 0 0 1

# ---------------------
# 正規分布(ガウス分布)
# ---------------------

# 確率論や統計学で用いられる、連続的な変数に関する確率分布の１つである。
# データが平均値の付近に集積する(山のような形を形成する)ような分布を表す。

# ---------
# 標準偏差
# ---------

# https://ai-trend.jp/basic-study/basic/standard-deviation/

# 標準偏差は対象データのバラつきの大きさを示す指標であり、「s」や「σ」で表される。
# 「s」と「σ」はどちらも標準偏差を表す記号ではあるが、
# 「s」のときは標本の標準偏差、「σ」は母集団の標準偏差として使用されることが多い傾向がある。
# 標準偏差が大きいほど、対象のデータに数値的な散らばりが多いことを表している。
# 標準偏差を求めておけば、全体的なデータの傾向が掴みやすくなるメリットがある。